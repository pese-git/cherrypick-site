<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Введение on CherryPick DI</title><link>https://pese-git.github.io/cherrypick-site/ru/</link><description>Recent content in Введение on CherryPick DI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pese-git.github.io/cherrypick-site/ru/index.xml" rel="self" type="application/rss+xml"/><item><title>CherryPick DI</title><link>https://pese-git.github.io/cherrypick-site/ru/posts/library_post/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://pese-git.github.io/cherrypick-site/ru/posts/library_post/</guid><description>CherryPick DI # DI-контейнер – это библиотека, которая обеспечивает функциональность механизма внедрения зависимостей.
Содержание # Предисловие Возможности библиотеки Компоненты библиотеки 3.1. Scope 3.2. Module 3.3. Binding Пример использования Заключение 1. Предисловие # Первые попытки разработать свой DI для пет проектов написанных на Flutter SDK были начаты в начале 2020 года.
Сподвигло меня на этот шаг несколько причин:
На тот момент я не нашел DI в pub.dev с возможностью делить контейнер на scope (возможно плохо искал) Упростить работу с зависимостями в проекте Желание написать собственный DI Иметь в арсенале простой DI (надеюсь с простым API) 2.</description></item><item><title/><link>https://pese-git.github.io/cherrypick-site/ru/docs/0_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D1%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pese-git.github.io/cherrypick-site/ru/docs/0_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D1%8F/</guid><description>Предыстория # Первые попытки разработать свой DI для пет проектов написанных на Flutter SDK были начаты в начале 2020 года.
Сподвигло меня на этот шаг несколько причин:
На тот момент я не нашел DI в pub.dev с возможностью делить контейнер на scope Упростить работу с зависимостями в проекте Желание написать собственный DI Иметь в арсенале простой DI (надеюсь с простым API) В июне 2020 был принято решение вести разработку в публичном репозитории.</description></item><item><title/><link>https://pese-git.github.io/cherrypick-site/ru/docs/1_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pese-git.github.io/cherrypick-site/ru/docs/1_%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D1%8B/</guid><description>Основные компоненты DI # Библиотека состоит из трех основных компонентов:
Scope Module Binding Scope # Scope - это контейнер, который хранит все дерево зависимостей (scope,modules,instances). Через scope можно получить доступ к instance, для этого нужно вызвать метод resolve&amp;lt;T&amp;gt;() и указать тип объекта, а так же можно передать дополнительные параметры.
Scope определяет область видимости и время жизни зависимостей.
Scope в приложении образуют древовидную иерархическую структуру. Например, у вас может быть Scope для всего приложения, и дочерний Scope для конкретного экрана или группы экранов.</description></item><item><title/><link>https://pese-git.github.io/cherrypick-site/ru/docs/2_%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pese-git.github.io/cherrypick-site/ru/docs/2_%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0/</guid><description> Подключение библиотеки # Установите библиотеку # Запустите команду:
Для Dart проекта:
dart pub add cherrypick Для Flutter проекта:
flutter pub add cherrypick Команда добавит строку пакета cherrypick (и запустит в фоне неявно dart pub get):
dependencies: cherrypick: &amp;lt;version&amp;gt; Импортируйте библиотеку # Теперь в вашем коде Dart вы можете использовать:
import &amp;#39;package:cherrypick/cherrypick.dart&amp;#39;;</description></item><item><title/><link>https://pese-git.github.io/cherrypick-site/ru/docs/3_%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%86%D0%B8%D1%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pese-git.github.io/cherrypick-site/ru/docs/3_%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%86%D0%B8%D1%8F/</guid><description>Создайте первое приложение с применением CherryPick DI # Шаг 1. Создайте приложение # Используйте команду flutter create для создания нового проекта:
flutter create sample_app cd sample_app Шаг 2. Добавьте зависимости # dependencies: cherrypick: ^1.0.2 # DI shared_preferences: ^2.0.13 flutter_bloc: ^8.0.1 equatable: ^2.0.3 flutter_form_builder: ^7.1.1 form_builder_validators: ^8.1.1 Шаг 3. Напишите простое приложение для редактирования пользователя # Добавьте модель пользователя в каталог проекта lib/user.dart: # import &amp;#39;package:equatable/equatable.dart&amp;#39;; class User extends Equatable { final String name; final String email; const User({required this.</description></item></channel></rss>