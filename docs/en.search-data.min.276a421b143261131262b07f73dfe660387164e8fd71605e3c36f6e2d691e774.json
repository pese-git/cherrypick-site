[{"id":0,"href":"/cherrypick-site/posts/library_post/","title":"CherryPick DI","section":"Blog","content":" CherryPick DI # DI-container – this is library, when provide mechanism dependency injection.\nContent # Preface Library features Library components 3.1. scope 3.2. module 3.3. Binding Usage example Conclusion 1. Preface # The first attempts to develop our own DI for pet projects written on the Flutter SDK were started at the start of 2020.\nSeveral reasons prompted me to take this step:\nAt that time, I did not find DI in pub.dev with the ability to divide the container into scope (perhaps I was looking badly) Simplify working with dependencies in the project Desire to write your own DI Have a simple DI in your arsenal (hopefully with a simple API) 2. Library\u0026rsquo;s features: # DI container\u0026rsquo;s main features:\nInitialization instance with name Initialization instance when singleton Separate container to scopes 3. Main components DI # Library contain three main components:\nScope Module Binding 3.1. Scope # Scope is a container that stores the entire dependency tree (scope, modules, instances). Through the scope, you can access the custom instance, for this you need to call the resolve\u0026lt;T\u0026gt;() method and specify the type of the object, and you can also pass additional parameters.\nExample:\n// open main scope final rootScope = Cherrypick.openRootScope(); // initializing scope with a custom module rootScope.installModules([AppModule()]); // takes custom instance final str = rootScope.resolve\u0026lt;String\u0026gt;(); // or final str = rootScope.tryResolve\u0026lt;String\u0026gt;(); // close main scope Cherrypick.closeRootScope(); 3.2. Module # Module is a container of user instances, and on the basis of which the user can create their modules. The user in his module must implement the void builder (Scope currentScope) method.\nExample:\nclass AppModule extends Module { @override void builder(Scope currentScope) { bind\u0026lt;ApiClient\u0026gt;().toInstance(ApiClientMock()); } } 3.3. Binding # Binding is a custom instance configurator that contains methods for configuring a dependency.\nThere are two main methods for initializing a custom instance toInstance () and toProvide () and auxiliary withName () and singleton ().\ntoInstance() - takes a initialized instance\ntoProvide() - takes a provider function (instance constructor)\nwithName() - takes a string to name the instance. By this name, it will be possible to extract instance from the DI container\nsingleton() - sets a flag in the Binding that tells the DI container that there is only one dependency.\nExample:\n// initializing a text string instance through a method toInstance() Binding\u0026lt;String\u0026gt;().toInstance(\u0026#34;hello world\u0026#34;); // or // initializing a text string instance Binding\u0026lt;String\u0026gt;().toProvide(() =\u0026gt; \u0026#34;hello world\u0026#34;); // initializing an instance of a string named Binding\u0026lt;String\u0026gt;().withName(\u0026#34;my_string\u0026#34;).toInstance(\u0026#34;hello world\u0026#34;); // or Binding\u0026lt;String\u0026gt;().withName(\u0026#34;my_string\u0026#34;).toProvide(() =\u0026gt; \u0026#34;hello world\u0026#34;); // instance initialization like singleton Binding\u0026lt;String\u0026gt;().toInstance(\u0026#34;hello world\u0026#34;); // or Binding\u0026lt;String\u0026gt;().toProvide(() =\u0026gt; \u0026#34;hello world\u0026#34;).singleton(); 4. Example # import \u0026#39;dart:async\u0026#39;; import \u0026#39;package:meta/meta.dart\u0026#39;; import \u0026#39;package:cherrypick/cherrypick.dart\u0026#39;; class AppModule extends Module { @override void builder(Scope currentScope) { bind\u0026lt;ApiClient\u0026gt;().withName(\u0026#34;apiClientMock\u0026#34;).toInstance(ApiClientMock()); bind\u0026lt;ApiClient\u0026gt;().withName(\u0026#34;apiClientImpl\u0026#34;).toInstance(ApiClientImpl()); } } class FeatureModule extends Module { bool isMock; FeatureModule({required this.isMock}); @override void builder(Scope currentScope) { bind\u0026lt;DataRepository\u0026gt;() .withName(\u0026#34;networkRepo\u0026#34;) .toProvide( () =\u0026gt; NetworkDataRepository( currentScope.resolve\u0026lt;ApiClient\u0026gt;( named: isMock ? \u0026#34;apiClientMock\u0026#34; : \u0026#34;apiClientImpl\u0026#34;, ), ), ) .singleton(); bind\u0026lt;DataBloc\u0026gt;().toProvide( () =\u0026gt; DataBloc( currentScope.resolve\u0026lt;DataRepository\u0026gt;(named: \u0026#34;networkRepo\u0026#34;), ), ); } } void main() async { final scope = openRootScope().installModules([ AppModule(), ]); final subScope = scope .openSubScope(\u0026#34;featureScope\u0026#34;) .installModules([FeatureModule(isMock: true)]); final dataBloc = subScope.resolve\u0026lt;DataBloc\u0026gt;(); dataBloc.data.listen((d) =\u0026gt; print(\u0026#39;Received data: $d\u0026#39;), onError: (e) =\u0026gt; print(\u0026#39;Error: $e\u0026#39;), onDone: () =\u0026gt; print(\u0026#39;DONE\u0026#39;)); await dataBloc.fetchData(); } class DataBloc { final DataRepository _dataRepository; Stream\u0026lt;String\u0026gt; get data =\u0026gt; _dataController.stream; StreamController\u0026lt;String\u0026gt; _dataController = new StreamController.broadcast(); DataBloc(this._dataRepository); Future\u0026lt;void\u0026gt; fetchData() async { try { _dataController.sink.add(await _dataRepository.getData()); } catch (e) { _dataController.sink.addError(e); } } void dispose() { _dataController.close(); } } abstract class DataRepository { Future\u0026lt;String\u0026gt; getData(); } class NetworkDataRepository implements DataRepository { final ApiClient _apiClient; final _token = \u0026#39;token\u0026#39;; NetworkDataRepository(this._apiClient); @override Future\u0026lt;String\u0026gt; getData() async =\u0026gt; await _apiClient.sendRequest( url: \u0026#39;www.google.com\u0026#39;, token: _token, requestBody: {\u0026#39;type\u0026#39;: \u0026#39;data\u0026#39;}); } abstract class ApiClient { Future sendRequest({@required String url, String token, Map requestBody}); } class ApiClientMock implements ApiClient { @override Future sendRequest( {@required String? url, String? token, Map? requestBody}) async { return \u0026#39;Local Data\u0026#39;; } } class ApiClientImpl implements ApiClient { @override Future sendRequest( {@required String? url, String? token, Map? requestBody}) async { return \u0026#39;Network data\u0026#39;; } } 5. Conclusion # Now this library used to in three commercial projects and own pet projects.\n"},{"id":1,"href":"/cherrypick-site/docs/0_information/","title":"0 Information","section":"Docs","content":" Информация # History # The first attempts to develop our own DI for pet projects written on the Flutter SDK were started at the start of 2020.\nSeveral reasons prompted me to take this step:\nAt that time, I did not find DI in pub.dev with the ability to divide the container into scope (perhaps I was looking badly) Simplify working with dependencies in the project Desire to write your own DI Have a simple DI in your arsenal (hopefully with a simple API) Library\u0026rsquo;s features: # DI container\u0026rsquo;s main features:\nInitialization instance with name Initialization instance when singleton Separate container to scopes "},{"id":2,"href":"/cherrypick-site/docs/1_components/","title":"1 Components","section":"Docs","content":" Main components DI # Library contain three main components:\nScope Module Binding Scope # Scope is a container that stores the entire dependency tree (scope, modules, instances). Through the scope, you can access the custom instance, for this you need to call the resolve\u0026lt;T\u0026gt;() method and specify the type of the object, and you can also pass additional parameters.\nExample:\n// open main scope final rootScope = Cherrypick.openRootScope(); // initializing scope with a custom module rootScope.installModules([AppModule()]); // takes custom instance final str = rootScope.resolve\u0026lt;String\u0026gt;(); // or final str = rootScope.tryResolve\u0026lt;String\u0026gt;(); // close main scope Cherrypick.closeRootScope(); Module # Module is a container of user instances, and on the basis of which the user can create their modules. The user in his module must implement the void builder (Scope currentScope) method. Модули добавляются в Scope с помощью метода scope.installModules(…), после чего Scope может разрешать зависимости по правилам, определённым в его модулях.\nExample:\nclass AppModule extends Module { @override void builder(Scope currentScope) { bind\u0026lt;ApiClient\u0026gt;().toInstance(ApiClientMock()); } } Binding # Binding is a custom instance configurator that contains methods for configuring a dependency.\nThere are two main methods for initializing a custom instance toInstance() and toProvide() and auxiliary withName() and singleton().\ntoInstance() - takes a initialized instance\ntoProvide() - takes a provider function (instance constructor)\nwithName() - takes a string to name the instance. By this name, it will be possible to extract instance from the DI container\nsingleton() - sets a flag in the Binding that tells the DI container that there is only one dependency.\nExample:\n// initializing a text string instance through a method toInstance() Binding\u0026lt;String\u0026gt;().toInstance(\u0026#34;hello world\u0026#34;); // or // initializing a text string instance Binding\u0026lt;String\u0026gt;().toProvide(() =\u0026gt; \u0026#34;hello world\u0026#34;); // initializing an instance of a string named Binding\u0026lt;String\u0026gt;().withName(\u0026#34;my_string\u0026#34;).toInstance(\u0026#34;hello world\u0026#34;); // or Binding\u0026lt;String\u0026gt;().withName(\u0026#34;my_string\u0026#34;).toProvide(() =\u0026gt; \u0026#34;hello world\u0026#34;); // instance initialization like singleton Binding\u0026lt;String\u0026gt;().toInstance(\u0026#34;hello world\u0026#34;); // or Binding\u0026lt;String\u0026gt;().toProvide(() =\u0026gt; \u0026#34;hello world\u0026#34;).singleton(); "},{"id":3,"href":"/cherrypick-site/docs/2_install/","title":"2 Install","section":"Docs","content":" Use to library # Install library # Run command:\nFor Dart project:\ndart pub add cherrypick For Flutter flutter:\nflutter pub add cherrypick Command added library cherrypick (and run command dart pub get in background) to pubspec.yaml:\ndependencies: cherrypick: \u0026lt;version\u0026gt; Import library # Now you can use library:\nimport \u0026#39;package:cherrypick/cherrypick.dart\u0026#39;; "},{"id":4,"href":"/cherrypick-site/docs/3_tutorial/","title":"3 Tutorial","section":"Docs","content":" Создайте первое приложение с применением CherryPick DI # Step 1. Create application # Use to command flutter create for create new project:\nflutter create sample_app cd sample_app Step 2. Added dependencies # dependencies: cherrypick: ^1.0.2 # DI shared_preferences: ^2.0.13 flutter_bloc: ^8.0.1 equatable: ^2.0.3 flutter_form_builder: ^7.1.1 form_builder_validators: ^8.1.1 Step 3. Write simple app for user editable. # Added user model to project directory lib/user.dart: # import \u0026#39;package:equatable/equatable.dart\u0026#39;; class User extends Equatable { final String name; final String email; const User({required this.name, required this.email}); const User.empty() : name = \u0026#39;\u0026#39;, email = \u0026#39;\u0026#39;; @override List\u0026lt;Object?\u0026gt; get props =\u0026gt; [name, email]; @override bool? get stringify =\u0026gt; true; } Added protocol for UserRepository to project directory lib/user_repository.dart: # import \u0026#39;./user.dart\u0026#39;; abstract class UserRepository { User getUser(); void saveUser(User user); } Added implementation user repository to project directory lib/pref_user_repository.dart: # import \u0026#39;package:shared_preferences/shared_preferences.dart\u0026#39;; import \u0026#39;user.dart\u0026#39;; import \u0026#39;user_repository.dart\u0026#39;; class PrefUserRepository extends UserRepository { final SharedPreferences sharedPreferences; static const String keyName = \u0026#34;KEY_NAME\u0026#34;; static const String keyEmail = \u0026#34;KEY_EMAIL\u0026#34;; PrefUserRepository({required this.sharedPreferences}); @override User getUser() { return User( name: sharedPreferences.getString(keyName) ?? \u0026#39;\u0026#39;, email: sharedPreferences.getString(keyEmail) ?? \u0026#39;\u0026#39;, ); } @override void saveUser(User user) async { await sharedPreferences.setString(keyName, user.name); await sharedPreferences.setString(keyEmail, user.email); } } Added events for UserBloc lib/bloc/user_bloc_event.dart: # import \u0026#39;package:equatable/equatable.dart\u0026#39;; import \u0026#39;package:sample_app/user.dart\u0026#39;; abstract class UserBlocEvent extends Equatable { const UserBlocEvent(); factory UserBlocEvent.getUser() = GetUserEvent; const factory UserBlocEvent.saveUser(User user) = SaveUserEvent; } class GetUserEvent extends UserBlocEvent { @override List\u0026lt;Object?\u0026gt; get props =\u0026gt; []; } class SaveUserEvent extends UserBlocEvent { final User user; const SaveUserEvent(this.user); @override List\u0026lt;Object?\u0026gt; get props =\u0026gt; [user]; } Added states for UserBloc lib/bloc/user_bloc_state.dart: # import \u0026#39;package:equatable/equatable.dart\u0026#39;; import \u0026#39;../user.dart\u0026#39;; abstract class UserBlocState extends Equatable { final User user; const UserBlocState(this.user); const factory UserBlocState.init(User user) = InitState; const factory UserBlocState.successGetUser(User user) = SuccessGetUserState; const factory UserBlocState.successSaveUser(User user) = SuccessSaveUserState; @override List\u0026lt;Object?\u0026gt; get props =\u0026gt; [user]; } class InitState extends UserBlocState { const InitState(User user) : super(user); } class LoadingGetUserState extends UserBlocState { const LoadingGetUserState(User user) : super(user); } class SuccessGetUserState extends UserBlocState { const SuccessGetUserState(User user) : super(user); } class SuccessSaveUserState extends UserBlocState { const SuccessSaveUserState(User user) : super(user); } Added bloc for used to repository lib/bloc/user_bloc.dart: # import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_bloc/flutter_bloc.dart\u0026#39;; import \u0026#39;package:sample_app/bloc/user_bloc_event.dart\u0026#39;; import \u0026#39;package:sample_app/bloc/user_bloc_state.dart\u0026#39;; import \u0026#39;package:sample_app/user_repository.dart\u0026#39;; import \u0026#39;../user.dart\u0026#39;; class UserBloc extends Bloc\u0026lt;UserBlocEvent, UserBlocState\u0026gt; { final UserRepository userRepository; UserBloc({ required this.userRepository, }) : super(const UserBlocState.init(User.empty())) { on\u0026lt;GetUserEvent\u0026gt;(_onGetUserEvent); on\u0026lt;SaveUserEvent\u0026gt;(_onSaveUserEvent); } void _onGetUserEvent(GetUserEvent event, emit) { final user = userRepository.getUser(); emit(UserBlocState.successGetUser(user)); } void _onSaveUserEvent(SaveUserEvent event, emit) { userRepository.saveUser(event.user); emit(UserBlocState.successSaveUser(event.user)); } } Added user edit screen lib/user_page.dart: # import \u0026#39;package:cherrypick/cherrypick.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_bloc/flutter_bloc.dart\u0026#39;; import \u0026#39;package:flutter_form_builder/flutter_form_builder.dart\u0026#39;; import \u0026#39;package:form_builder_validators/form_builder_validators.dart\u0026#39;; import \u0026#39;package:sample_app/bloc/user_bloc.dart\u0026#39;; import \u0026#39;package:sample_app/bloc/user_bloc_event.dart\u0026#39;; import \u0026#39;package:sample_app/bloc/user_bloc_state.dart\u0026#39;; import \u0026#39;package:sample_app/di/scopes.dart\u0026#39;; import \u0026#39;package:sample_app/user.dart\u0026#39;; class UserPage extends StatelessWidget { UserPage({Key? key, required this.title}) : super(key: key); final String title; final _formKey = GlobalKey\u0026lt;FormBuilderState\u0026gt;(); @override Widget build(BuildContext context) { return BlocProvider\u0026lt;UserBloc\u0026gt;( create: (context) { return CherryPick.openScope(scopeName: Scopes.APP_SCOPE) .resolve\u0026lt;UserBloc\u0026gt;(); }, child: BlocBuilder\u0026lt;UserBloc, UserBlocState\u0026gt;( builder: ((context, state) { return Scaffold( appBar: AppBar( title: Text(title), ), body: Column( children: [ Text(state.user.toString()), const SizedBox(width: 20), FormBuilder( key: _formKey, child: Column( children: [ FormBuilderTextField( name: \u0026#39;name\u0026#39;, decoration: const InputDecoration(labelText: \u0026#39;Name\u0026#39;), keyboardType: TextInputType.text, validator: FormBuilderValidators.compose([ FormBuilderValidators.required\u0026lt;String\u0026gt;(), ]), ), FormBuilderTextField( name: \u0026#39;email\u0026#39;, decoration: const InputDecoration(labelText: \u0026#39;Email\u0026#39;), keyboardType: TextInputType.text, validator: FormBuilderValidators.compose([ FormBuilderValidators.required\u0026lt;String\u0026gt;(), ]), ), ], ), ), const SizedBox(width: 20), MaterialButton( color: Theme.of(context).colorScheme.secondary, child: const Text( \u0026#34;Save\u0026#34;, style: TextStyle(color: Colors.white), ), onPressed: () { _formKey.currentState?.saveAndValidate(); BlocProvider.of\u0026lt;UserBloc\u0026gt;(context).add( UserBlocEvent.saveUser( User( name: _formKey.currentState?.fields[\u0026#39;name\u0026#39;]?.value ?? \u0026#39;\u0026#39;, email: _formKey.currentState?.fields[\u0026#39;email\u0026#39;]?.value ?? \u0026#39;\u0026#39;, ), ), ); }, ), ], ), ); }), ), ); } } Added main widget lib/app.dart: # import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;user_page.dart\u0026#39;; class App extends StatelessWidget { const App({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Sample App\u0026#39;, theme: ThemeData( primarySwatch: Colors.blue, ), home: UserPage(title: \u0026#39;Sample App\u0026#39;), ); } } Added DI module lib/di/user_module.dart: # Write all dependencies in module UserModule.\nWe can see when UserBloc depend by UserRepository.\nimport \u0026#39;package:cherrypick/cherrypick.dart\u0026#39;; import \u0026#39;package:sample_app/bloc/user_bloc.dart\u0026#39;; import \u0026#39;package:sample_app/pref_user_repository.dart\u0026#39;; import \u0026#39;package:sample_app/user_repository.dart\u0026#39;; import \u0026#39;package:shared_preferences/shared_preferences.dart\u0026#39;; class UserModule extends Module { final SharedPreferences sharedPreferences; UserModule({required this.sharedPreferences}); @override void builder(Scope currentScope) { bind\u0026lt;UserRepository\u0026gt;() .toProvide( () =\u0026gt; PrefUserRepository(sharedPreferences: sharedPreferences)) .singleton(); bind\u0026lt;UserBloc\u0026gt;().toProvide( () =\u0026gt; UserBloc( userRepository: currentScope.resolve\u0026lt;UserRepository\u0026gt;(), ), ); } } Added scope name lib/di/scopes.dart: # class Scopes { static const String appScope = \u0026#39;appScope\u0026#39;; } Added function main to lib/main.dart: # import \u0026#39;package:cherrypick/cherrypick.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:sample_app/di/user_module.dart\u0026#39;; import \u0026#39;package:sample_app/di/scopes.dart\u0026#39;; import \u0026#39;package:shared_preferences/shared_preferences.dart\u0026#39;; import \u0026#39;./app.dart\u0026#39;; void main() async { final sharedPreferences = await SharedPreferences.getInstance(); final appScope = CherryPick.openScope(scopeName: Scopes.appScope); appScope.installModules( [ UserModule(sharedPreferences: sharedPreferences), ], ); runApp(const App()); } We can see to function main() when DI initialization in two stage.\nStage 1. Open scope\nfinal appScope = CherryPick.openScope(scopeName: Scopes.appScope); Stage 2. Module initialization UserModule in scope appScope\nappScope.installModules( [ UserModule(sharedPreferences: sharedPreferences), ], ); Step 4. Run application # Use to command flutter run for run application.\nflutter run "}]