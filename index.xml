<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on CherryPick DI</title><link>http://example.org/</link><description>Recent content in Introduction on CherryPick DI</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>CherryPick DI</title><link>http://example.org/posts/library_post/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>http://example.org/posts/library_post/</guid><description>CherryPick DI # DI-container – this is library, when provide mechanism dependency injection.
Content # Preface Library features Library components 3.1. scope 3.2. module 3.3. Binding Usage example Conclusion 1. Preface # The first attempts to develop our own DI for pet projects written on the Flutter SDK were started at the start of 2020.
Several reasons prompted me to take this step:</description></item><item><title/><link>http://example.org/docs/0_information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/0_information/</guid><description>Информация # History # The first attempts to develop our own DI for pet projects written on the Flutter SDK were started at the start of 2020.
Several reasons prompted me to take this step:
At that time, I did not find DI in pub.dev with the ability to divide the container into scope (perhaps I was looking badly) Simplify working with dependencies in the project Desire to write your own DI Have a simple DI in your arsenal (hopefully with a simple API) Library&amp;rsquo;s features: # DI container&amp;rsquo;s main features:</description></item><item><title/><link>http://example.org/docs/1_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/1_components/</guid><description>Main components DI # Library contain three main components:
Scope Module Binding Scope # Scope is a container that stores the entire dependency tree (scope, modules, instances). Through the scope, you can access the custom instance, for this you need to call the resolve&amp;lt;T&amp;gt;() method and specify the type of the object, and you can also pass additional parameters.
Example:
// open main scope final rootScope = Cherrypick.</description></item><item><title/><link>http://example.org/docs/2_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/2_install/</guid><description>Use to library # Install library # Run command:
For Dart project:
dart pub add cherrypick For Flutter flutter:
flutter pub add cherrypick Command added library cherrypick (and run command dart pub get in background) to pubspec.yaml:
dependencies: cherrypick: &amp;lt;version&amp;gt; Import library # Now you can use library:
import &amp;#39;package:cherrypick/cherrypick.dart&amp;#39;;</description></item><item><title/><link>http://example.org/docs/3_tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/3_tutorial/</guid><description>Создайте первое приложение с применением CherryPick DI # Step 1. Create application # Use to command flutter create for create new project:
flutter create sample_app cd sample_app Step 2. Added dependencies # dependencies: cherrypick: ^1.0.2 # DI shared_preferences: ^2.0.13 flutter_bloc: ^8.0.1 equatable: ^2.0.3 flutter_form_builder: ^7.1.1 form_builder_validators: ^8.1.1 Step 3. Write simple app for user editable. # Added user model to project directory lib/user.</description></item></channel></rss>